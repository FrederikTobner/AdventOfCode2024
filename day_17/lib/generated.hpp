#pragma once

/**
 * @file generated.hpp
 * @brief Code generated by the transpiler
 */

#include <cmath>
#include <cstdint>
#include <iostream>
#include <vector>

namespace aoc::day_17 {

void run_using_best_lang() {
    bool first_out = true;
    int64_t a = 62769524;
    int64_t b = 0;
    int64_t c = 0;
_0:
    b = a % 8;
_10:
    b ^= 7;
_20:
    c = a / std::pow(2, b);
_30:
    a = a / 8;
_40:
    b ^= c;
_50:
    b ^= 7;
_60:
    if (first_out) {
        std::cout << b % 8;
        first_out = false;
    } else {
        std::cout << "," << b % 8;
    }
_70:
    if (a != 0) {
        goto _0;
    }
    if (!first_out) {
        std::cout << std::endl;
    }
    return;
}

[[nodiscard]] auto calculate_byte(int64_t a) -> int64_t {
    auto b = a % 8;
    b ^= 7;
    auto c = a / static_cast<int64_t>(std::pow(2, b));
    b ^= c;
    b ^= 7;
    return b % 8;
}

[[nodiscard]] auto find_register_value(int64_t desired_register_value, std::vector<int64_t> const & goals,
                                       int currentIndex) -> int64_t {
    for (int i = 0; i < 8; i++) {
        if (calculate_byte(desired_register_value + i) == goals[currentIndex]) {
            if (currentIndex + 1 == goals.size()) {
                return desired_register_value + 3;
            }
            int64_t result = find_register_value((desired_register_value + i) << 3, goals, currentIndex + 1);
            if (result != -1) {
                return result;
            }
        }
    }
    return -1;
}

} // namespace aoc::day_17